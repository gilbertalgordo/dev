import React, { useState } from 'react';

function CashReserveMultiplier() {
  const [initialReserve, setInitialReserve] = useState('');
  const [reserveRatio, setReserveRatio] = useState('');
  const [multiplierResult, setMultiplierResult] = useState(null);
  const [error, setError] = useState('');

  const calculateMultiplier = () => {
    // --- IMPORTANT: Replace this with your actual "advance cash reserve multiplier" logic ---
    // This is just a placeholder example based on a *very simplified* money multiplier concept.
    // YOU NEED TO DEFINE WHAT YOUR MULTIPLIER DOES.
    if (isNaN(parseFloat(initialReserve)) || isNaN(parseFloat(reserveRatio))) {
      setError('Please enter valid numbers for both fields.');
      setMultiplierResult(null);
      return;
    }

    const initial = parseFloat(initialReserve);
    const ratio = parseFloat(reserveRatio);

    if (ratio <= 0 || ratio > 1) {
      setError('Reserve ratio must be between 0 and 1 (e.g., 0.1 for 10%).');
      setMultiplierResult(null);
      return;
    }

    // Example: Simple money multiplier (1 / reserve ratio) * initial reserve
    const result = (1 / ratio) * initial;
    setMultiplierResult(result.toFixed(2)); // Format to 2 decimal places
    setError('');
  };

  return (
    <div style={{ fontFamily: 'Arial, sans-serif', padding: '20px', maxWidth: '500px', margin: 'auto', border: '1px solid #ccc', borderRadius: '8px', boxShadow: '0 2px 4px rgba(0,0,0,0.1)' }}>
      <h2>Cash Reserve Multiplier Calculator</h2>

      <div style={{ marginBottom: '15px' }}>
        <label htmlFor="initialReserve" style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>
          Initial Reserve Amount:
        </label>
        <input
          type="number"
          id="initialReserve"
          value={initialReserve}
          onChange={(e) => setInitialReserve(e.target.value)}
          placeholder="e.g., 100000"
          style={{ width: '100%', padding: '8px', border: '1px solid #ddd', borderRadius: '4px' }}
        />
      </div>

      <div style={{ marginBottom: '20px' }}>
        <label htmlFor="reserveRatio" style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>
          Reserve Ratio (as a decimal):
        </label>
        <input
          type="number"
          id="reserveRatio"
          value={reserveRatio}
          onChange={(e) => setReserveRatio(e.target.value)}
          placeholder="e.g., 0.1 (for 10%)"
          step="0.01"
          style={{ width: '100%', padding: '8px', border: '1px solid #ddd', borderRadius: '4px' }}
        />
      </div>

      <button
        onClick={calculateMultiplier}
        style={{
          backgroundColor: '#007bff',
          color: 'white',
          padding: '10px 15px',
          border: 'none',
          borderRadius: '4px',
          cursor: 'pointer',
          fontSize: '16px',
          width: '100%'
        }}
      >
        Calculate Multiplier
      </button>

      {error && (
        <p style={{ color: 'red', marginTop: '15px', textAlign: 'center' }}>{error}</p>
      )}

      {multiplierResult !== null && (
        <div style={{ marginTop: '20px', padding: '15px', backgroundColor: '#e9f7ef', border: '1px solid #d4edda', borderRadius: '4px', textAlign: 'center' }}>
          <h3 style={{ color: '#28a745', marginBottom: '10px' }}>Calculated Result:</h3>
          <p style={{ fontSize: '24px', fontWeight: 'bold', color: '#333' }}>
            ${multiplierResult}
          </p>
          <p style={{ fontSize: '14px', color: '#555' }}>
            (This represents the potential total money supply/cash derived from the initial reserve based on your defined multiplier logic.)
          </p>
        </div>
      )}
    </div>
  );
}

export default CashReserveMultiplier;


import React, { useState } from 'react';

function CashReserveMultiplier() {
  const [initialDeposit, setInitialDeposit] = useState('');
  const [reserveRatio, setReserveRatio] = useState('');
  const [moneyMultiplier, setMoneyMultiplier] = useState(null);
  const [totalMoneySupply, setTotalMoneySupply] = useState(null);
  const [error, setError] = useState('');

  const calculateMultiplier = () => {
    setError(''); // Clear previous errors

    const deposit = parseFloat(initialDeposit);
    const ratio = parseFloat(reserveRatio);

    if (isNaN(deposit) || isNaN(ratio)) {
      setError('Please enter valid numbers for both fields.');
      setMoneyMultiplier(null);
      setTotalMoneySupply(null);
      return;
    }

    if (deposit < 0) {
      setError('Initial Deposit cannot be negative.');
      setMoneyMultiplier(null);
      setTotalMoneySupply(null);
      return;
    }

    if (ratio <= 0 || ratio > 1) {
      setError('Reserve Ratio must be a decimal between 0 (exclusive) and 1 (inclusive), e.g., 0.1 for 10%.');
      setMoneyMultiplier(null);
      setTotalMoneySupply(null);
      return;
    }

    const calculatedMoneyMultiplier = 1 / ratio;
    const calculatedTotalMoneySupply = deposit * calculatedMoneyMultiplier;

    setMoneyMultiplier(calculatedMoneyMultiplier.toFixed(2));
    setTotalMoneySupply(calculatedTotalMoneySupply.toFixed(2));
  };

  return (
    <div style={styles.container}>
      <h2 style={styles.heading}>Cash Reserve Multiplier Calculator</h2>

      <div style={styles.inputGroup}>
        <label htmlFor="initialDeposit" style={styles.label}>
          Initial Deposit / Reserve Amount:
        </label>
        <input
          type="number"
          id="initialDeposit"
          value={initialDeposit}
          onChange={(e) => setInitialDeposit(e.target.value)}
          placeholder="e.g., 100000"
          style={styles.input}
        />
      </div>

      <div style={styles.inputGroup}>
        <label htmlFor="reserveRatio" style={styles.label}>
          Reserve Requirement Ratio (as a decimal):
        </label>
        <input
          type="number"
          id="reserveRatio"
          value={reserveRatio}
          onChange={(e) => setReserveRatio(e.target.value)}
          placeholder="e.g., 0.1 (for 10%)"
          step="0.01"
          style={styles.input}
        />
      </div>

      <button onClick={calculateMultiplier} style={styles.button}>
        Calculate
      </button>

      {error && (
        <p style={styles.errorText}>{error}</p>
      )}

      {(moneyMultiplier !== null && totalMoneySupply !== null && !error) && (
        <div style={styles.resultsContainer}>
          <h3 style={styles.resultsHeading}>Calculation Results:</h3>
          <p style={styles.resultItem}>
            <strong>Money Multiplier:</strong> <span style={styles.resultValue}>{moneyMultiplier}</span>
          </p>
          <p style={styles.resultItem}>
            <strong>Total Potential Money Supply:</strong> <span style={styles.resultValue}>${totalMoneySupply}</span>
          </p>
          <p style={styles.explanation}>
            (This demonstrates how an initial deposit can lead to a larger total money supply through fractional-reserve banking.)
          </p>
        </div>
      )}
    </div>
  );
}

const styles = {
  container: {
    fontFamily: 'Arial, sans-serif',
    padding: '30px',
    maxWidth: '600px',
    margin: '40px auto',
    border: '1px solid #e0e0e0',
    borderRadius: '10px',
    boxShadow: '0 4px 12px rgba(0,0,0,0.08)',
    backgroundColor: '#fff',
  },
  heading: {
    textAlign: 'center',
    color: '#333',
    marginBottom: '30px',
    fontSize: '28px',
  },
  inputGroup: {
    marginBottom: '20px',
  },
  label: {
    display: 'block',
    marginBottom: '8px',
    fontWeight: 'bold',
    color: '#555',
    fontSize: '16px',
  },
  input: {
    width: '100%',
    padding: '12px',
    border: '1px solid #ccc',
    borderRadius: '6px',
    fontSize: '16px',
    boxSizing: 'border-box', // Include padding in width
  },
  button: {
    backgroundColor: '#007bff',
    color: 'white',
    padding: '12px 25px',
    border: 'none',
    borderRadius: '6px',
    cursor: 'pointer',
    fontSize: '18px',
    width: '100%',
    marginTop: '20px',
    transition: 'background-color 0.3s ease',
  },
  buttonHover: {
    backgroundColor: '#0056b3',
  },
  errorText: {
    color: '#dc3545',
    marginTop: '15px',
    textAlign: 'center',
    fontWeight: 'bold',
    fontSize: '15px',
  },
  resultsContainer: {
    marginTop: '30px',
    padding: '20px',
    backgroundColor: '#f8f9fa',
    border: '1px solid #e9ecef',
    borderRadius: '8px',
    textAlign: 'center',
  },
  resultsHeading: {
    color: '#28a745',
    marginBottom: '15px',
    fontSize: '22px',
  },
  resultItem: {
    fontSize: '18px',
    marginBottom: '10px',
    color: '#333',
  },
  resultValue: {
    fontWeight: 'bold',
    color: '#007bff',
  },
  explanation: {
    fontSize: '14px',
    color: '#6c757d',
    marginTop: '20px',
    lineHeight: '1.5',
  }
};

export default CashReserveMultiplier;


import React from 'react';
import CashReserveMultiplier from './CashReserveMultiplier'; // Adjust path if needed

function App() {
  return (
    <div className="App">
      <CashReserveMultiplier />
    </div>
  );
}

export default App;
