import time
import threading

class OceanDrone:
    def __init__(self, id):
        self.id = id
        self.depth = 0
        self.destination = None
        self.obstacle_detected = False
        self.communication_channel = None

    def dive_to(self, depth):
        self.depth = depth
        print(f"Ocean Drone {self.id}: Diving to depth {depth}")

    def ascend_to_surface(self):
        self.depth = 0
        print(f"Ocean Drone {self.id}: Ascending to the surface")

    def navigate_to(self, destination):
        self.destination = destination
        print(f"Ocean Drone {self.id}: Navigating to {destination}")

    def detect_obstacle(self):
        # Simulated obstacle detection
        time.sleep(2)
        self.obstacle_detected = True
        print(f"Ocean Drone {self.id}: Obstacle detected!")

    def avoid_obstacle(self):
        if self.obstacle_detected:
            print(f"Ocean Drone {self.id}: Avoiding obstacle...")
            # Code for obstacle avoidance algorithm
            self.obstacle_detected = False

    def reach_destination(self):
        if self.destination:
            print(f"Ocean Drone {self.id}: Reached destination {self.destination}")
            self.destination = None

    def send_message(self, message):
        if self.communication_channel:
            self.communication_channel.send_message(self.id, message)

class CommunicationSystem:
    def __init__(self):
        self.ocean_drones = []

    def add_ocean_drone(self, ocean_drone):
        self.ocean_drones.append(ocean_drone)
        ocean_drone.communication_channel = self

    def send_message(self, drone_id, message):
        for ocean_drone in self.ocean_drones:
            if ocean_drone.id == drone_id:
                print(f"Sending message to Ocean Drone {drone_id}: {message}")
                # Code for sending message to drone

def autonomous_navigation(ocean_drone, destination):
    ocean_drone.navigate_to(destination)
    while ocean_drone.destination:
        ocean_drone.avoid_obstacle()
        time.sleep(1)
    ocean_drone.reach_destination()

# Create ocean drones
ocean_drone1 = OceanDrone(1)
ocean_drone2 = OceanDrone(2)

# Create communication system
comm_system = CommunicationSystem()
comm_system.add_ocean_drone(ocean_drone1)
comm_system.add_ocean_drone(ocean_drone2)

# Autonomous navigation threads
nav_thread1 = threading.Thread(target=autonomous_navigation, args=(ocean_drone1, "Coral reef"))
nav_thread2 = threading.Thread(target=autonomous_navigation, args=(ocean_drone2, "Shipwreck"))

# Start navigation
nav_thread1.start()
nav_thread2.start()

# Wait for navigation threads to finish
nav_thread1.join()
nav_thread2.join()

# Send messages
ocean_drone1.send_message("Conducting coral reef survey")
ocean_drone2.send_message("Investigating shipwreck for archaeological artifacts")
