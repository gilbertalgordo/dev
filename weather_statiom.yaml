import React, { useState, useEffect } from 'react';
import axios from 'axios';

// Placeholder for Quantum AI weather prediction (replace with actual AI integration)
const predictWeather = async (data) => {
  // Simulate AI processing - replace with actual AI model calls
  return new Promise((resolve) => {
    setTimeout(() => {
      const predictedData = {
        ...data,
        predictedTemperature: data.temperature + Math.random() * 2 - 1,
        predictedHumidity: data.humidity + Math.random() * 5 - 2.5,
      };
      resolve(predictedData);
    }, 1000); // Simulate processing time
  });
};

const WeatherStation = () => {
  const [weatherData, setWeatherData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isConnected, setIsConnected] = useState(false);
  const [predictedData, setPredictedData] = useState(null);

  const fetchData = async () => {
    setLoading(true);
    setError(null);
    try {
      // Simulate fetching data from a sensor or API
      const response = await axios.get('https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true');
      const current = response.data.current_weather;
      const data = {
        temperature: current.temperature,
        windspeed: current.windspeed,
        winddirection: current.winddirection,
        time: current.time,
      };

      setWeatherData(data);
      setIsConnected(true);

      // Quantum AI Prediction
      const prediction = await predictWeather(data);
      setPredictedData(prediction);

    } catch (err) {
      setError(err.message || 'Failed to fetch weather data.');
      setIsConnected(false);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    const autoConnect = () => {
      fetchData();
    };

    autoConnect(); // Initial fetch
    const intervalId = setInterval(autoConnect, 60000); // Auto-update every minute

    return () => clearInterval(intervalId); // Cleanup interval on unmount
  }, []);

  if (loading) return <div>Loading...</div>;
  if (error) return <div>Error: {error}</div>;

  return (
    <div>
      <h1>Advanced Weather Station</h1>
      {isConnected ? (
        <div>
          <h2>Current Weather</h2>
          <p>Temperature: {weatherData.temperature}°C</p>
          <p>Wind Speed: {weatherData.windspeed} km/h</p>
          <p>Wind Direction: {weatherData.winddirection}°</p>
          <p>Time: {weatherData.time}</p>

          {predictedData && (
            <div>
              <h2>AI Predicted Weather</h2>
              <p>Predicted Temperature: {predictedData.predictedTemperature}°C</p>
              <p>Predicted Humidity: {predictedData.predictedHumidity}%</p>
            </div>
          )}

        </div>
      ) : (
        <div>Not Connected. Attempting to reconnect...</div>
      )}
    </div>
  );
};

export default WeatherStation;


import React, { useState, useEffect } from 'react';
import axios from 'axios';

// Placeholder for Quantum AI weather prediction (replace with actual AI integration)
const predictWeather = async (data) => {
  return new Promise((resolve) => {
    setTimeout(() => {
      const predictedData = {
        ...data,
        predictedTemperature: data.temperature + Math.random() * 2 - 1,
        predictedHumidity: data.humidity + Math.random() * 5 - 2.5,
      };
      resolve(predictedData);
    }, 1000);
  });
};

const WeatherWidget = () => {
  const [weatherData, setWeatherData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isConnected, setIsConnected] = useState(false);
  const [predictedData, setPredictedData] = useState(null);

  const fetchData = async () => {
    setLoading(true);
    setError(null);
    try {
      const response = await axios.get('https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true');
      const current = response.data.current_weather;
      const data = {
        temperature: current.temperature,
        windspeed: current.windspeed,
        winddirection: current.winddirection,
        time: current.time,
      };

      setWeatherData(data);
      setIsConnected(true);

      const prediction = await predictWeather(data);
      setPredictedData(prediction);

    } catch (err) {
      setError(err.message || 'Failed to fetch weather data.');
      setIsConnected(false);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    const autoConnect = () => {
      fetchData();
    };

    autoConnect();
    const intervalId = setInterval(autoConnect, 60000);

    return () => clearInterval(intervalId);
  }, []);

  if (loading) return <div>Loading...</div>;
  if (error) return <div>Error: {error}</div>;

  return (
    <div style={{ border: '1px solid #ccc', padding: '10px', width: '300px', borderRadius: '5px' }}>
      <h3>Weather Widget</h3>
      {isConnected ? (
        <div>
          <p>Temp: {weatherData.temperature}°C</p>
          <p>Wind: {weatherData.windspeed} km/h</p>
          {predictedData && (
            <div>
              <p>Predicted Temp: {predictedData.predictedTemperature}°C</p>
            </div>
          )}
        </div>
      ) : (
        <div>Connecting...</div>
      )}
    </div>
  );
};

export default WeatherWidget;
