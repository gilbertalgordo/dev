import React, { useState, useRef, useEffect } from 'react';

const MobileCopilot = () => {
  const [userInput, setUserInput] = useState('');
  const [chatHistory, setChatHistory] = useState([]);
  const [isListening, setIsListening] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const recognition = useRef(null);
  const chatContainerRef = useRef(null);

  useEffect(() => {
    if ('SpeechRecognition' in window || 'webkitSpeechRecognition' in window) {
      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
      recognition.current = new SpeechRecognition();
      recognition.current.continuous = false;
      recognition.current.lang = 'en-US';

      recognition.current.onstart = () => {
        setIsListening(true);
      };

      recognition.current.onresult = (event) => {
        const transcript = event.results[0][0].transcript;
        setUserInput(transcript);
        handleSendMessage(transcript);
      };

      recognition.current.onend = () => {
        setIsListening(false);
      };

      recognition.current.onerror = (event) => {
        console.error('Speech recognition error:', event.error);
        setIsListening(false);
      };
    } else {
      console.error('Speech recognition not supported in this browser.');
    }
  }, []);

  useEffect(() => {
    if (chatContainerRef.current) {
      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;
    }
  }, [chatHistory]);

  const handleInputChange = (event) => {
    setUserInput(event.target.value);
  };

  const handleSendMessage = async (message) => {
    if (!message.trim()) return;

    const newUserMessage = { text: message, sender: 'user' };
    setChatHistory((prevHistory) => [...prevHistory, newUserMessage]);
    setUserInput('');
    setIsLoading(true);

    try {
      // Replace with your actual API call to the copilot AI
      const response = await fetch('/api/copilot', { //Example API endpoint
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ message }),
      });

      if (!response.ok) {
        throw new Error('Network response was not ok');
      }

      const data = await response.json();
      const aiResponseMessage = { text: data.response, sender: 'copilot' };
      setChatHistory((prevHistory) => [...prevHistory, aiResponseMessage]);
    } catch (error) {
      console.error('Error fetching copilot response:', error);
      const errorMessage = { text: "Sorry, I encountered an error.", sender: "copilot"}
      setChatHistory((prevHistory) => [...prevHistory, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyDown = (event) => {
    if (event.key === 'Enter') {
      handleSendMessage(userInput);
    }
  };

  const toggleListening = () => {
    if (isListening) {
      recognition.current.stop();
    } else {
      recognition.current.start();
    }
  };

  return (
    <div style={{ height: '100vh', display: 'flex', flexDirection: 'column' }}>
      <div
        ref={chatContainerRef}
        style={{ flex: 1, overflowY: 'auto', padding: '10px' }}
      >
        {chatHistory.map((message, index) => (
          <div
            key={index}
            style={{
              textAlign: message.sender === 'user' ? 'right' : 'left',
              marginBottom: '10px',
            }}
          >
            <div
              style={{
                display: 'inline-block',
                backgroundColor: message.sender === 'user' ? '#DCF8C6' : '#E0E0E0',
                padding: '8px 12px',
                borderRadius: '10px',
                maxWidth: '80%',
              }}
            >
              {message.text}
            </div>
          </div>
        ))}
        {isLoading && <p>Loading...</p>}
      </div>
      <div style={{ padding: '10px', display: 'flex' }}>
        <input
          type="text"
          value={userInput}
          onChange={handleInputChange}
          onKeyDown={handleKeyDown}
          placeholder="Type your message..."
          style={{ flex: 1, padding: '8px', borderRadius: '5px', border: '1px solid #ccc' }}
        />
        <button
          onClick={toggleListening}
          style={{ marginLeft: '10px', padding: '8px 12px', borderRadius: '5px', backgroundColor: isListening ? 'red' : 'blue', color:'white' }}
        >
          {isListening ? 'Stop' : 'Speak'}
        </button>
        <button
          onClick={() => handleSendMessage(userInput)}
          style={{ marginLeft: '10px', padding: '8px 12px', borderRadius: '5px', backgroundColor: 'green', color:'white' }}
        >
          Send
        </button>
      </div>
    </div>
  );
};

export default MobileCopilot;
