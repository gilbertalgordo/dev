import React, { useState, useEffect } from 'react';

function AdvancedSecurityDashboard() {
  const [darkWebAlerts, setDarkWebAlerts] = useState([]);
  const [adBlockEnabled, setAdBlockEnabled] = useState(true);
  const [mobileDataScanResults, setMobileDataScanResults] = useState(null);
  const [activeAttacks, setActiveAttacks] = useState([]);
  const [spywareDetected, setSpywareDetected] = useState(false);
  const [speedTestResults, setSpeedTestResults] = useState(null);

  useEffect(() => {
    // Simulated Dark Web Monitoring
    const darkWebCheckInterval = setInterval(() => {
      const randomAlert = Math.random();
      if (randomAlert < 0.2) {
        setDarkWebAlerts((prevAlerts) => [
          ...prevAlerts,
          {
            id: Date.now(),
            message: `Potential data leak: ${Math.random().toString(36).substring(2, 15)} found on dark web.`,
            severity: Math.random() < 0.5 ? 'Medium' : 'High',
          },
        ]);
      }
    }, 10000);

    // Simulated Mobile Data Scan
    const mobileScan = async () => {
      setTimeout(() => {
        const scanResult = {
          malware: Math.random() < 0.1,
          vulnerabilities: Math.random() * 5,
          performance: Math.random() * 100,
        };
        setMobileDataScanResults(scanResult);
      }, 3000);
    };

    mobileScan();

    // Simulated Realtime Attack Detection
    const attackInterval = setInterval(() => {
      const attackChance = Math.random();
      if (attackChance < 0.05) {
        setActiveAttacks((prevAttacks) => [
          ...prevAttacks,
          {
            id: Date.now(),
            type: Math.random() < 0.5 ? 'DDoS' : 'Brute Force',
            source: `IP: ${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}`,
          },
        ]);
      }
    }, 5000);

    //Simulated Spyware detection
    const spywareCheckInterval = setInterval(() => {
      const spywareChance = Math.random();
      if (spywareChance < 0.1) {
        setSpywareDetected(true);
      } else {
        setSpywareDetected(false);
      }
    }, 7000);

    return () => {
      clearInterval(darkWebCheckInterval);
      clearInterval(attackInterval);
      clearInterval(spywareCheckInterval);
    };
  }, []);

  const handleAdBlockToggle = () => {
    setAdBlockEnabled((prev) => !prev);
  };

  const handleDefendAttack = (attackId) => {
    setActiveAttacks((prevAttacks) =>
      prevAttacks.filter((attack) => attack.id !== attackId)
    );
    alert('Taunting and Defense Activated: "Your attempts are futile! Begone!"');
  };

  const handleSpeedTest = () => {
    // Simulate Speed Test (Replace with real speed test logic)
    setTimeout(() => {
      const downloadSpeed = Math.random() * 100;
      const uploadSpeed = Math.random() * 50;
      const latency = Math.random() * 50;
      setSpeedTestResults({ downloadSpeed, uploadSpeed, latency });
    }, 5000);
  };

  return (
    <div>
      <h1>Advanced Security Dashboard</h1>

      <h2>Dark Web Alerts</h2>
      <ul>
        {darkWebAlerts.map((alert) => (
          <li key={alert.id} style={{ color: alert.severity === 'High' ? 'red' : 'orange' }}>
            {alert.message} ({alert.severity})
          </li>
        ))}
      </ul>

      <h2>Ad Block</h2>
      <button onClick={handleAdBlockToggle}>
        {adBlockEnabled ? 'Disable Ad Block' : 'Enable Ad Block'}
      </button>

      <h2>Mobile Data Scan</h2>
      {mobileDataScanResults && (
        <div>
          <p>Malware: {mobileDataScanResults.malware ? 'Detected' : 'None'}</p>
          <p>Vulnerabilities: {mobileDataScanResults.vulnerabilities.toFixed(2)}</p>
          <p>Performance: {mobileDataScanResults.performance.toFixed(2)}%</p>
        </div>
      )}

      <h2>Realtime Attacks</h2>
      <ul>
        {activeAttacks.map((attack) => (
          <li key={attack.id}>
            {attack.type} from {attack.source}
            <button onClick={() => handleDefendAttack(attack.id)}>Defend</button>
          </li>
        ))}
      </ul>

      <h2>Spyware Detection</h2>
      <p style={{ color: spywareDetected ? 'red' : 'green' }}>
        Spyware: {spywareDetected ? 'Detected' : 'None Detected'}
      </p>

      <h2>Speed Test Analyzer</h2>
      <button onClick={handleSpeedTest}>Run Speed Test</button>
      {speedTestResults && (
        <div>
          <p>Download Speed: {speedTestResults.downloadSpeed.toFixed(2)} Mbps</p>
          <p>Upload Speed: {speedTestResults.uploadSpeed.toFixed(2)} Mbps</p>
          <p>Latency: {speedTestResults.latency.toFixed(2)} ms</p>
        </div>
      )}
    </div>
  );
}

export default AdvancedSecurityDashboard;
