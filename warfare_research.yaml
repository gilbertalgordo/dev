import socket

def scan_ports(target, ports):
    print(f"Scanning {target}...")
    for port in ports:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        result = sock.connect_ex((target, port))
        if result == 0:
            print(f"Port {port}: Open")
        else:
            print(f"Port {port}: Closed")
        sock.close()

# Example usage
target = "192.168.1.1"
ports = [22, 80, 443, 8080]
scan_ports(target, ports)

from dronekit import connect, VehicleMode

# Connect to the vehicle
vehicle = connect('127.0.0.1:14550', wait_ready=True)

# Function to arm and take off to a specified altitude
def arm_and_takeoff(aTargetAltitude):
    print("Basic pre-arm checks")
    while not vehicle.is_armable:
        print(" Waiting for vehicle to initialise...")
        time.sleep(1)

    print("Arming motors")
    vehicle.mode = VehicleMode("GUIDED")
    vehicle.armed = True
    while not vehicle.armed:
        print(" Waiting for arming...")
        time.sleep(1)

    print("Taking off!")
    vehicle.simple_takeoff(aTargetAltitude)

    while True:
        print(f" Altitude: {vehicle.location.global_relative_frame.alt}")
        if vehicle.location.global_relative_frame.alt >= aTargetAltitude * 0.95:
            print("Reached target altitude")
            break
        time.sleep(1)

# Example usage
arm_and_takeoff(10)
vehicle.mode = VehicleMode("LAND")
vehicle.close()


import tensorflow as tf
from tensorflow.keras import layers, models

# Load and prepare the dataset (CIFAR-10 for simplicity)
(train_images, train_labels), (test_images, test_labels) = tf.keras.datasets.cifar10.load_data()
train_images, test_images = train_images / 255.0, test_images / 255.0

# Build the convolutional neural network (CNN)
model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(10)
])

# Compile and train the model
model.compile(optimizer='adam', loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True), metrics=['accuracy'])
model.fit(train_images, train_labels, epochs=10, validation_data=(test_images, test_labels))

# Save the model
model.save("image_recognition_model.h5")


import numpy as np
import matplotlib.pyplot as plt

def generate_jamming_signal(frequency, duration, sample_rate=1e6):
    t = np.arange(0, duration, 1/sample_rate)
    jamming_signal = np.sin(2 * np.pi * frequency * t)
    return jamming_signal

# Example usage
frequency = 2.4e9  # 2.4 GHz
duration = 1  # 1 second
jamming_signal = generate_jamming_signal(frequency, duration)

plt.plot(jamming_signal[:1000])
plt.title("Simulated Jamming Signal")
plt.xlabel("Sample")
plt.ylabel("Amplitude")
plt.show()


import numpy as np
import matplotlib.pyplot as plt
from scipy.constants import G, M_earth

def satellite_orbit_simulation(altitude, num_points=1000):
    radius = 6371e3 + altitude  # Earth's radius + altitude
    velocity = np.sqrt(G * M_earth / radius)  # Circular orbit velocity
    time = np.linspace(0, 2 * np.pi * np.sqrt(radius**3 / (G * M_earth)), num_points)
    
    x = radius * np.cos(time)
    y = radius * np.sin(time)
    
    return x, y

# Example usage
altitude = 500e3  # 500 km
x, y = satellite_orbit_simulation(altitude)
plt.plot(x, y)
plt.title("Simulated Satellite Orbit")
plt.xlabel("X (meters)")
plt.ylabel("Y (meters)")
plt.gca().set_aspect('equal', adjustable='box')
plt.show()

