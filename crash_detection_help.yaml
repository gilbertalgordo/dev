import time

class VehicleCrashDetection:
    def __init__(self, accel_threshold=5.0, gyro_threshold=100.0, impact_duration_ms=50):
        self.accelerometer_data = [] # [x, y, z] G-forces
        self.gyroscope_data = []     # [roll, pitch, yaw] degrees/second
        self.accel_threshold = accel_threshold  # G-force threshold for impact
        self.gyro_threshold = gyro_threshold    # Angular velocity threshold
        self.impact_duration_ms = impact_duration_ms # Duration over which impact must be sustained

        self.gps_module = None # Placeholder for GPS module object
        self.gsm_module = None # Placeholder for GSM/LTE module object (for communication)
        self.emergency_contacts = ["+1234567890", "+1987654321"] # Pre-configured contacts

    def read_accelerometer(self):
        # Simulate reading from a physical accelerometer sensor
        # In a real system, this would interact with hardware APIs
        # Return [ax, ay, az]
        return [self.simulate_sensor_reading(10), self.simulate_sensor_reading(10), self.simulate_sensor_reading(10)]

    def read_gyroscope(self):
        # Simulate reading from a physical gyroscope sensor
        # Return [gx, gy, gz]
        return [self.simulate_sensor_reading(200), self.simulate_sensor_reading(200), self.simulate_sensor_reading(200)]

    def simulate_sensor_reading(self, max_val):
        # Simulate normal fluctuating sensor data
        import random
        return random.uniform(-max_val / 10, max_val / 10)

    def calculate_g_force_magnitude(self, accel_data):
        # Calculate the magnitude of the acceleration vector
        return (accel_data[0]**2 + accel_data[1]**2 + accel_data[2]**2)**0.5

    def check_for_crash(self):
        start_time = time.time()
        impact_detected_start = None

        while True:
            current_accel = self.read_accelerometer()
            current_gyro = self.read_gyroscope()

            g_force_mag = self.calculate_g_force_magnitude(current_accel)
            gyro_mag = self.calculate_g_force_magnitude(current_gyro) # Using same for simplicity

            # Basic impact detection logic
            if g_force_mag > self.accel_threshold and gyro_mag > self.gyro_threshold:
                if impact_detected_start is None:
                    impact_detected_start = time.time()
                elif (time.time() - impact_detected_start) * 1000 >= self.impact_duration_ms:
                    print("CRASH DETECTED!")
                    self.trigger_emergency_response()
                    impact_detected_start = None # Reset for next detection
            else:
                impact_detected_start = None

            time.sleep(0.01) # Check every 10 milliseconds

    def get_current_location(self):
        # In a real system, interact with GPS module
        if self.gps_module:
            return self.gps_module.get_location()
        return "Unknown Location (Lat: XX.XXXX, Lon: YY.YYYY)"

    def send_emergency_alert(self, message):
        # In a real system, interact with GSM/LTE module
        if self.gsm_module:
            for contact in self.emergency_contacts:
                self.gsm_module.send_sms(contact, message)
        print(f"Emergency Alert Sent to: {self.emergency_contacts} with message: '{message}'")

    def trigger_emergency_response(self):
        location = self.get_current_location()
        message = f"Urgent: Vehicle crash detected! Possible location: {location}. Please send help."
        self.send_emergency_alert(message)
        # Activate in-vehicle emergency call system (e.g., eCall)
        self.activate_ecall()

    def activate_ecall(self):
        # Simulate eCall system activation (e.g., connecting to emergency services automatically)
        print("Activating automatic emergency call (eCall)...")
        # This would typically involve a dedicated module that establishes a voice call and transmits data

# Example Usage (conceptual):
if __name__ == "__main__":
    crash_detector = VehicleCrashDetection()
    print("Monitoring for crashes...")
    # Simulate a crash after a few seconds
    # For a real system, this would be a continuous loop in the vehicle's embedded system
    # You would replace the simulate_sensor_reading with actual sensor reads.
    
    # To demonstrate a simulated crash:
    print("Simulating normal driving for 3 seconds...")
    time.sleep(3) 

    print("Simulating a crash event...")
    # Manually set accelerometer data to simulate a crash
    crash_detector.simulate_sensor_reading = lambda x: random.uniform(5.5, 15.0) # High G-force
    crash_detector.check_for_crash() # Start the monitoring loop (would be continuously running)
    
    # In a real system, the `check_for_crash` would be a background process.
    # The simulation above will trigger the detection quickly due to the forced high readings.


import subprocess
import time
import os

class DeviceAutoRepair:
    def __init__(self, service_name="my_critical_service.py", log_file="repair_log.txt"):
        self.service_name = service_name
        self.log_file = log_file
        self.max_restart_attempts = 3
        self.restart_interval_sec = 5

    def log_event(self, message):
        timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
        with open(self.log_file, "a") as f:
            f.write(f"[{timestamp}] {message}\n")
        print(message)

    def check_service_status(self):
        # Simulate checking if a process is running
        try:
            # This is a very basic check. In a real system, you might:
            # - Check a specific PID file
            # - Query a system service manager (e.g., systemd on Linux, Windows Services)
            # - Try to connect to a port the service should be listening on
            cmd = f"pgrep -f {self.service_name}" # Example for Linux/macOS
            output = subprocess.check_output(cmd, shell=True).decode().strip()
            if output:
                return True
            return False
        except subprocess.CalledProcessError:
            return False # Process not found

    def start_service(self):
        self.log_event(f"Attempting to start {self.service_name}...")
        try:
            # In a real scenario, you'd use a proper service management command
            # e.g., `sudo systemctl start my_service` or `python my_critical_service.py &`
            subprocess.Popen(["python", self.service_name]) # Example: running a Python script
            time.sleep(2) # Give it time to start
            if self.check_service_status():
                self.log_event(f"{self.service_name} started successfully.")
                return True
            else:
                self.log_event(f"Failed to start {self.service_name}.")
                return False
        except Exception as e:
            self.log_event(f"Error starting {self.service_name}: {e}")
            return False

    def auto_repair_loop(self):
        restart_count = 0
        while True:
            if not self.check_service_status():
                self.log_event(f"{self.service_name} is not running. Initiating repair...")
                if restart_count < self.max_restart_attempts:
                    if self.start_service():
                        restart_count = 0 # Reset count on successful restart
                    else:
                        restart_count += 1
                        self.log_event(f"Restart attempt {restart_count}/{self.max_restart_attempts} failed. Retrying in {self.restart_interval_sec} seconds.")
                else:
                    self.log_event(f"Max restart attempts reached for {self.service_name}. Manual intervention required.")
                    # Potentially send an alert (email, SMS) here
                    break # Stop trying to restart, assume unrecoverable

            time.sleep(self.restart_interval_sec) # Check every few seconds

# Example Usage (conceptual):
if __name__ == "__main__":
    # Create a dummy service file to test
    with open("my_critical_service.py", "w") as f:
        f.write("import time\n")
        f.write("print('My critical service started.')\n")
        f.write("while True: time.sleep(1) # Keep running\n")

    repair_system = DeviceAutoRepair()
    print("Starting auto-repair system for my_critical_service.py...")
    
    # In a real scenario, this would likely be a background daemon
    # For demonstration, we'll run it directly and then simulate a crash
    
    # Start the service initially
    if repair_system.start_service():
        print("Service running. Simulating a crash after 10 seconds...")
        time.sleep(10)
        
        # Simulate a crash by killing the process
        print("Killing the service to simulate a crash...")
        try:
            subprocess.run(f"pkill -f {repair_system.service_name}", shell=True)
            print("Service killed.")
        except Exception as e:
            print(f"Could not kill service (might not be running): {e}")

        # Now let the auto-repair loop try to fix it
        repair_system.auto_repair_loop()
    else:
        print("Initial service start failed. Auto-repair won't proceed.")



import React, { useState, useEffect } from 'react';
import VehicleStatusCard from './VehicleStatusCard';
import DeviceStatusCard from './DeviceStatusCard';
import CrashAlertList from './CrashAlertList';
import './Dashboard.css'; // Assuming some basic CSS for layout

const Dashboard = () => {
    const [vehicleData, setVehicleData] = useState([]);
    const [deviceData, setDeviceData] = useState([]);
    const [crashAlerts, setCrashAlerts] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
        const fetchData = async () => {
            try {
                // Simulate API calls
                // In a real app, you'd use fetch or axios to hit your backend API
                const vehiclesResponse = await new Promise(resolve => setTimeout(() => resolve({
                    json: () => Promise.resolve([
                        { id: 'V001', status: 'Online', location: '14.35 N, 121.05 E', lastUpdate: '2025-06-26T19:20:00Z', health: 'Good' },
                        { id: 'V002', status: 'Offline', location: 'N/A', lastUpdate: '2025-06-26T18:00:00Z', health: 'Unknown' },
                        { id: 'V003', status: 'Online', location: '14.30 N, 121.00 E', lastUpdate: '2025-06-26T19:24:00Z', health: 'Minor Fault' }
                    ])
                }), 500));
                const devicesResponse = await new Promise(resolve => setTimeout(() => resolve({
                    json: () => Promise.resolve([
                        { id: 'D001', type: 'IoT Sensor', status: 'Active', lastRepair: 'N/A', issues: [] },
                        { id: 'D002', type: 'Industrial Controller', status: 'Active', lastRepair: '2025-06-25', issues: ['Service down (auto-repaired)'] },
                        { id: 'D003', type: 'Smart Meter', status: 'Inactive', lastRepair: '2025-06-24', issues: ['Connectivity lost (unresolved)'] }
                    ])
                }), 700));
                const alertsResponse = await new Promise(resolve => setTimeout(() => resolve({
                    json: () => Promise.resolve([
                        { id: 'C001', vehicleId: 'V001', timestamp: '2025-06-26T19:15:30Z', location: '14.35 N, 121.05 E', severity: 'High', status: 'Acknowledged' },
                        { id: 'C002', vehicleId: 'V00X', timestamp: '2025-06-26T10:00:00Z', location: '14.32 N, 120.98 E', severity: 'Medium', status: 'Resolved' }
                    ])
                }), 900));

                setVehicleData(await vehiclesResponse.json());
                setDeviceData(await devicesResponse.json());
                setCrashAlerts(await alertsResponse.json());
            } catch (err) {
                setError("Failed to fetch data: " + err.message);
            } finally {
                setLoading(false);
            }
        };

        fetchData();

        // Optional: Set up a polling interval for real-time updates
        const interval = setInterval(fetchData, 10000); // Refresh every 10 seconds
        return () => clearInterval(interval); // Clean up on unmount

    }, []);

    if (loading) {
        return <div className="dashboard-loading">Loading dashboard data...</div>;
    }

    if (error) {
        return <div className="dashboard-error">Error: {error}</div>;
    }

    return (
        <div className="dashboard-container">
            <h1>System Monitoring Dashboard</h1>

            <section className="dashboard-section">
                <h2>Vehicle Status</h2>
                <div className="card-grid">
                    {vehicleData.map(vehicle => (
                        <VehicleStatusCard key={vehicle.id} vehicle={vehicle} />
                    ))}
                </div>
            </section>

            <section className="dashboard-section">
                <h2>Device Health & Repair Status</h2>
                <div className="card-grid">
                    {deviceData.map(device => (
                        <DeviceStatusCard key={device.id} device={device} />
                    ))}
                </div>
            </section>

            <section className="dashboard-section">
                <h2>Recent Crash Alerts</h2>
                <CrashAlertList alerts={crashAlerts} />
            </section>
        </div>
    );
};

export default Dashboard;



import React from 'react';
import './Card.css'; // Shared CSS for cards

const VehicleStatusCard = ({ vehicle }) => {
    const statusClass = vehicle.status === 'Online' ? 'status-online' : 'status-offline';
    const healthClass = vehicle.health === 'Good' ? 'health-good' : vehicle.health === 'Minor Fault' ? 'health-warning' : 'health-unknown';

    return (
        <div className="card vehicle-card">
            <h3>Vehicle ID: {vehicle.id}</h3>
            <p>Status: <span className={statusClass}>{vehicle.status}</span></p>
            <p>Health: <span className={healthClass}>{vehicle.health}</span></p>
            <p>Location: {vehicle.location}</p>
            <p>Last Update: {new Date(vehicle.lastUpdate).toLocaleString()}</p>
            {/* Could add a button here to view more details, or trigger actions if backend supports */}
        </div>
    );
};

export default VehicleStatusCard;



import React from 'react';
import './Card.css'; // Shared CSS for cards

const DeviceStatusCard = ({ device }) => {
    const statusClass = device.status === 'Active' ? 'status-online' : 'status-offline';

    return (
        <div className="card device-card">
            <h3>Device ID: {device.id} ({device.type})</h3>
            <p>Status: <span className={statusClass}>{device.status}</span></p>
            <p>Last Repair: {device.lastRepair}</p>
            <p>Issues: {device.issues.length > 0 ? device.issues.join(', ') : 'None'}</p>
            {/* Button to trigger a manual diagnostic or repair if applicable */}
        </div>
    );
};

export default DeviceStatusCard;



import React from 'react';
import './AlertList.css'; // Some basic CSS for the list

const CrashAlertList = ({ alerts }) => {
    if (alerts.length === 0) {
        return <p>No recent crash alerts.</p>;
    }

    return (
        <ul className="alert-list">
            {alerts.map(alert => (
                <li key={alert.id} className={`alert-item alert-severity-${alert.severity.toLowerCase()}`}>
                    <strong>Alert ID: {alert.id}</strong><br />
                    Vehicle ID: {alert.vehicleId}<br />
                    Time: {new Date(alert.timestamp).toLocaleString()}<br />
                    Location: {alert.location}<br />
                    Severity: {alert.severity}<br />
                    Status: {alert.status}
                    {/* Could add actions like "Acknowledge" or "View Details" */}
                </li>
            ))}
        </ul>
    );
};

export default CrashAlertList;



.dashboard-container {
    font-family: Arial, sans-serif;
    padding: 20px;
    max-width: 1200px;
    margin: 0 auto;
}

h1 {
    text-align: center;
    color: #333;
}

.dashboard-section {
    margin-bottom: 30px;
    padding: 20px;
    background-color: #f9f9f9;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.card-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 20px;
}

.dashboard-loading, .dashboard-error {
    text-align: center;
    padding: 50px;
    font-size: 1.2em;
    color: #555;
}

.dashboard-error {
    color: #d9534f;
}



.card {
    background-color: #fff;
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 15px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.05);
}

.card h3 {
    margin-top: 0;
    color: #0056b3;
}

.card p {
    margin-bottom: 5px;
    font-size: 0.95em;
}

.status-online {
    color: green;
    font-weight: bold;
}

.status-offline {
    color: red;
    font-weight: bold;
}

.health-good {
    color: green;
}

.health-warning {
    color: orange;
}

.health-unknown {
    color: gray;
}



.alert-list {
    list-style: none;
    padding: 0;
}

.alert-item {
    background-color: #ffe0e0;
    border: 1px solid #ffcccc;
    border-left: 5px solid #d9534f; /* Red for high severity */
    padding: 10px 15px;
    margin-bottom: 10px;
    border-radius: 5px;
    font-size: 0.9em;
}

.alert-item.alert-severity-high {
    border-left-color: #d9534f; /* Red */
}

.alert-item.alert-severity-medium {
    background-color: #fff8e0;
    border: 1px solid #ffe0b3;
    border-left-color: #f0ad4e; /* Orange */
}

.alert-item.alert-severity-low {
    background-color: #e0f2f7;
    border: 1px solid #cceeff;
    border-left-color: #5bc0de; /* Blue */
}



npx create-react-app my-monitoring-dashboard
cd my-monitoring-dashboard



import React from 'react';
import Dashboard from './Dashboard';
import './App.css'; // Your main App CSS (can be empty or global styles)

function App() {
  return (
    <div className="App">
      <Dashboard />
    </div>
  );
}

export default App;



npm start




