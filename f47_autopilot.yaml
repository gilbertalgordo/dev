import React, { useState, useEffect } from 'react';

const AdvancedF47BoeingAutopilot = () => {
  const [flightData, setFlightData] = useState({
    altitude: 10000,
    speed: 500,
    heading: 90,
    fuelLevel: 100,
    engineStatus: 'ON',
    navigation: {
      latitude: 34.0522,
      longitude: -118.2437,
      waypoints: [
        { latitude: 34.1000, longitude: -118.3000, altitude: 12000 },
        { latitude: 34.2000, longitude: -118.2000, altitude: 15000 },
        { latitude: 34.1500, longitude: -118.1000, altitude: 13000 },
      ],
      currentWaypointIndex: 0,
    },
    autopilotEngaged: false,
  });

  useEffect(() => {
    let intervalId;

    if (flightData.autopilotEngaged) {
      intervalId = setInterval(() => {
        setFlightData((prevData) => {
          const currentWaypoint = prevData.navigation.waypoints[prevData.navigation.currentWaypointIndex];

          if (!currentWaypoint) {
            return prevData; // No more waypoints
          }

          // Calculate distance and bearing to waypoint (simplified)
          const latDiff = currentWaypoint.latitude - prevData.navigation.latitude;
          const lonDiff = currentWaypoint.longitude - prevData.navigation.longitude;
          const distance = Math.sqrt(latDiff * latDiff + lonDiff * lonDiff);
          const bearing = (Math.atan2(lonDiff, latDiff) * 180) / Math.PI;

          // Adjust heading, altitude, and speed
          let newHeading = prevData.heading;
          if (Math.abs(bearing - prevData.heading) > 5) {
            newHeading += (bearing - prevData.heading) * 0.1; // Smooth turn
          }

          let newAltitude = prevData.altitude;
          if (Math.abs(currentWaypoint.altitude - prevData.altitude) > 100) {
            newAltitude += (currentWaypoint.altitude - prevData.altitude) * 0.05; // Smooth altitude change
          }

          let newSpeed = prevData.speed;
          if (distance > 0.01) {
            newSpeed += 10; // Accelerate towards waypoint
          } else {
            newSpeed -= 5; // Decelerate when close
          }
          newSpeed = Math.max(300, Math.min(newSpeed, 700)); // speed limits

          // Move towards waypoint
          const newLatitude = prevData.navigation.latitude + (Math.cos((newHeading * Math.PI) / 180) * prevData.speed * 0.000001);
          const newLongitude = prevData.navigation.longitude + (Math.sin((newHeading * Math.PI) / 180) * prevData.speed * 0.000001);

          // Check if reached waypoint
          if (distance < 0.005) {
            let newWaypointIndex = prevData.navigation.currentWaypointIndex + 1;
            if (newWaypointIndex >= prevData.navigation.waypoints.length) {
              newWaypointIndex = 0; // Loop back to the first waypoint
            }
            return {
              ...prevData,
              navigation: {
                ...prevData.navigation,
                currentWaypointIndex: newWaypointIndex,
              },
              altitude: currentWaypoint.altitude
            };
          }

          return {
            ...prevData,
            altitude: newAltitude,
            speed: newSpeed,
            heading: newHeading,
            navigation: {
              ...prevData.navigation,
              latitude: newLatitude,
              longitude: newLongitude,
            },
          };
        });
      }, 100);
    } else {
      clearInterval(intervalId);
    }

    return () => clearInterval(intervalId);
  }, [flightData.autopilotEngaged, flightData.navigation, flightData.altitude, flightData.speed, flightData.heading]);

  const handleToggleAutopilot = () => {
    setFlightData((prevData) => ({
      ...prevData,
      autopilotEngaged: !prevData.autopilotEngaged,
    }));
  };

  return (
    <div>
      <h1>Advanced F47 Boeing Autopilot</h1>
      <div>
        <button onClick={handleToggleAutopilot}>
          {flightData.autopilotEngaged ? 'Disengage Autopilot' : 'Engage Autopilot'}
        </button>
      </div>

      <div>
        <h2>Flight Data</h2>
        <p>Altitude: {flightData.altitude.toFixed(2)}</p>
        <p>Speed: {flightData.speed.toFixed(2)}</p>
        <p>Heading: {flightData.heading.toFixed(2)}</p>
        <p>Fuel Level: {flightData.fuelLevel.toFixed(2)}</p>
        <p>Engine Status: {flightData.engineStatus}</p>
      </div>

      <div>
        <h2>Navigation</h2>
        <p>Latitude: {flightData.navigation.latitude.toFixed(4)}</p>
        <p>Longitude: {flightData.navigation.longitude.toFixed(4)}</p>
        <p>Current Waypoint Index: {flightData.navigation.currentWaypointIndex}</p>
        <h3>Waypoints:</h3>
        <ul>
          {flightData.navigation.waypoints.map((waypoint, index) => (
            <li key={index}>
              Lat: {waypoint.latitude.toFixed(4)}, Lon: {waypoint.longitude.toFixed(4)}, Alt: {waypoint.altitude}
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
};

export default AdvancedF47BoeingAutopilot;
