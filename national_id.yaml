import React, { useState, useEffect } from 'react';

function NationalIDWidget() {
  const [nationalId, setNationalId] = useState('');
  const [name, setName] = useState('');
  const [address, setAddress] = useState('');
  const [age, setAge] = useState('');
  const [aiGeneratedId, setAiGeneratedId] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [autoFillEnabled, setAutoFillEnabled] = useState(false);

  useEffect(() => {
    if (autoFillEnabled) {
      setName('Gilbert Algordo');
      setAddress('B3 L86 Camella Homes Milan San Pedro Laguna 4023 Philippines');
      setAge(43);
    } else {
      setName('');
      setAddress('');
      setAge('');
    }
  }, [autoFillEnabled]);

  const generateNationalIdWithAI = async () => {
    setLoading(true);
    setError(null);

    try {
      await new Promise((resolve) => setTimeout(resolve, 2000));

      const generatedId = `AI-${Math.random()
        .toString(36)
        .substring(2, 15)
        .toUpperCase()}-${Date.now().toString().substring(8,13)}`;

      setAiGeneratedId(generatedId);
      setNationalId(generatedId);
    } catch (err) {
      setError(err.message || 'Error generating ID.');
    } finally {
      setLoading(false);
    }
  };

  const handleGenerateClick = () => {
    generateNationalIdWithAI();
  };

  const handleAutoFillToggle = () => {
    setAutoFillEnabled(!autoFillEnabled);
  };

  return (
    <div style={{ fontFamily: 'Arial, sans-serif', padding: '20px', maxWidth: '600px', margin: 'auto' }}>
      <h1>National ID Widget</h1>

      <label>
        <input
          type="checkbox"
          checked={autoFillEnabled}
          onChange={handleAutoFillToggle}
        />
        Autofill with Gilbert Algordo's Details
      </label>

      <div>
        <label>Name:</label>
        <input type="text" value={name} onChange={(e) => setName(e.target.value)} />
      </div>

      <div>
        <label>Address:</label>
        <input type="text" value={address} onChange={(e) => setAddress(e.target.value)} />
      </div>

      <div>
        <label>Age:</label>
        <input type="number" value={age} onChange={(e) => setAge(e.target.value)} />
      </div>

      <div style={{ marginTop: '20px' }}>
        <button
          onClick={handleGenerateClick}
          disabled={loading || !name || !address || !age}
          style={{
            padding: '10px 20px',
            backgroundColor: '#007bff',
            color: 'white',
            border: 'none',
            borderRadius: '5px',
            cursor: 'pointer',
          }}
        >
          {loading ? 'Generating...' : 'Generate National ID (Quantum AI)'}
        </button>
      </div>

      {loading && <p>Loading...</p>}
      {error && <p style={{ color: 'red' }}>Error: {error}</p>}

      {aiGeneratedId && (
        <div style={{ marginTop: '20px' }}>
          <h2>Generated National ID:</h2>
          <div style={{ border: '1px solid #ccc', padding: '10px', borderRadius: '5px' }}>
            {aiGeneratedId}
          </div>
        </div>
      )}

      {nationalId && !aiGeneratedId && (
        <div style={{ marginTop: '20px' }}>
          <h2>National ID:</h2>
          <div style={{ border: '1px solid #ccc', padding: '10px', borderRadius: '5px' }}>
            {nationalId}
          </div>
        </div>
      )}
      <div>
        <h2>Workflow Diagram</h2>
        <p>
          1. User interacts with the National ID Widget.<br/>
          2. User toggles the Autofill checkbox. <br/>
          3. If autofill is enabled, the name, address, and age fields are populated with Gilbert Algordo's details.<br/>
          4. User can manually enter or edit the name, address, and age. <br/>
          5. User clicks the "Generate National ID (Quantum AI)" button. <br/>
          6. The widget checks if all input fields are filled. <br/>
          7. If all fields are filled, the widget initiates the Quantum AI ID generation process (simulated).<br/>
          8. The widget displays a "Loading..." message. <br/>
          9. The simulated Quantum AI generates a unique ID. <br/>
          10. The widget displays the generated National ID. <br/>
          11. If an error occurs during the generation process, the widget displays an error message.
        </p>
      </div>
    </div>
  );
}

export default NationalIDWidget;
