import React, { useState, useEffect, useRef } from 'react';

const F47HybridEngine = () => {
  const [enginePower, setEnginePower] = useState(0);
  const [engineTemperature, setEngineTemperature] = useState(25);
  const [engineStatus, setEngineStatus] = useState('Offline');

  useEffect(() => {
    const powerInterval = setInterval(() => {
      if (engineStatus === 'Active') {
        setEnginePower((prevPower) => Math.min(prevPower + 5, 100));
        setEngineTemperature((prevTemp) => Math.min(prevTemp + 2, 120)); // Simulate heat generation
      } else {
        setEnginePower(0);
        setEngineTemperature(25);
      }
    }, 1000);

    return () => clearInterval(powerInterval);
  }, [engineStatus]);

  const startEngine = () => {
    setEngineStatus('Active');
  };

  const stopEngine = () => {
    setEngineStatus('Offline');
  };

  return (
    <div style={{ fontFamily: 'monospace', color: '#00FF00', padding: '20px', background: '#111', borderRadius: '8px' }}>
      <h2>F47 Hybrid Engine Status</h2>
      <p>Status: <span style={{ color: engineStatus === 'Active' ? 'lime' : 'red' }}>{engineStatus}</span></p>
      <p>Power: {enginePower}%</p>
      <p>Temperature: {engineTemperature}Â°C</p>
      <button onClick={startEngine} disabled={engineStatus === 'Active'}>Start Engine</button>
      <button onClick={stopEngine} disabled={engineStatus === 'Offline'}>Stop Engine</button>
    </div>
  );
};

const AuroraTriangle = () => {
  const [laserCharge, setLaserCharge] = useState(0);
  const [shockwaveCharge, setShockwaveCharge] = useState(0);
  const [laserActive, setLaserActive] = useState(false);
  const [shockwaveActive, setShockwaveActive] = useState(false);
  const laserRef = useRef(null);
  const shockwaveRef = useRef(null);

  useEffect(() => {
    const chargeInterval = setInterval(() => {
      if (laserCharge < 100) setLaserCharge((prevCharge) => prevCharge + 1);
      if (shockwaveCharge < 100) setShockwaveCharge((prevCharge) => prevCharge + 0.5); // Shockwave charges slower
    }, 500);

    return () => clearInterval(chargeInterval);
  }, []);

  const fireLaser = () => {
    if (laserCharge >= 100) {
      setLaserActive(true);
      setLaserCharge(0);
      // Simulate laser firing visual effect
      if (laserRef.current) {
        laserRef.current.style.animation = 'laserFire 1s linear';
        setTimeout(() => {
          if(laserRef.current){
            laserRef.current.style.animation = 'none';
          }
          setLaserActive(false);
        }, 1000);
      }
    }
  };

  const fireShockwave = () => {
    if (shockwaveCharge >= 100) {
      setShockwaveActive(true);
      setShockwaveCharge(0);
      // Simulate shockwave visual effect
      if (shockwaveRef.current) {
        shockwaveRef.current.style.animation = 'shockwaveExpand 1s ease-out';
        setTimeout(() => {
          if(shockwaveRef.current){
            shockwaveRef.current.style.animation = 'none';
          }
          setShockwaveActive(false);
        }, 1000);
      }
    }
  };

  return (
    <div style={{ fontFamily: 'monospace', color: '#00FFFF', padding: '20px', background: '#222', borderRadius: '8px' }}>
      <h2>Aurora Triangle Systems</h2>
      <div style={{ position: 'relative' }}>
        <div
          ref={laserRef}
          style={{
            position: 'absolute',
            top: '50%',
            left: '50%',
            transform: 'translate(-50%, -50%)',
            width: '10px',
            height: '100px',
            background: 'linear-gradient(to top, red, yellow)',
            display: laserActive ? 'block' : 'none',
            transformOrigin: 'top center',
          }}
        />
        <div
          ref={shockwaveRef}
          style={{
            position: 'absolute',
            top: '50%',
            left: '50%',
            transform: 'translate(-50%, -50%)',
            width: '20px',
            height: '20px',
            borderRadius: '50%',
            background: 'lightblue',
            opacity: shockwaveActive ? 0.5 : 0,
          }}
        />
      </div>
      <p>Laser Charge: {laserCharge}%</p>
      <p>Shockwave Charge: {shockwaveCharge}%</p>
      <button onClick={fireLaser} disabled={laserCharge < 100}>Fire Triple Laser Canon</button>
      <button onClick={fireShockwave} disabled={shockwaveCharge < 100}>Fire Super Electric Shockwave</button>
      <style>
        {`
          @keyframes laserFire {
            0% { height: 0px; opacity: 1; }
            100% { height: 300px; opacity: 0; }
          }
          @keyframes shockwaveExpand {
            0% { transform: translate(-50%, -50%) scale(0.1); opacity: 0.8; }
            100% { transform: translate(-50%, -50%) scale(5); opacity: 0; }
          }
        `}
      </style>
    </div>
  );
};

const FuturisticControlPanel = () => {
  return (
    <div style={{ display: 'flex', justifyContent: 'space-around', background:'#000', padding:'20px' }}>
      <F47HybridEngine />
      <AuroraTriangle />
    </div>
  );
};

export default FuturisticControlPanel;
