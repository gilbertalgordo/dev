from scapy.all import *

# Define a list of suspicious IP addresses
suspicious_ips = ['192.168.1.100', '10.0.0.1']

# Function to analyze packets
def analyze_packet(packet):
    if IP in packet:
        ip_src = packet[IP].src
        ip_dst = packet[IP].dst
        if ip_src in suspicious_ips or ip_dst in suspicious_ips:
            print(f"Suspicious activity detected from {ip_src} to {ip_dst}")

# Sniff network packets and apply the analysis function
sniff(prn=analyze_packet, filter="ip", store=0)

import hashlib
import os

# Define a dictionary of known malware hashes
known_hashes = {
    'eicar_test_file': '275a021bbfb648bf8c8e854d996fc4da'
}

# Function to calculate the MD5 hash of a file
def md5(file_path):
    hasher = hashlib.md5()
    with open(file_path, 'rb') as file:
        buf = file.read()
        hasher.update(buf)
    return hasher.hexdigest()

# Function to scan a directory for malware
def scan_directory(directory):
    for root, dirs, files in os.walk(directory):
        for file in files:
            file_path = os.path.join(root, file)
            file_hash = md5(file_path)
            if file_hash in known_hashes.values():
                print(f"Malware detected: {file_path}")

# Scan the current directory
scan_directory('.')

import requests

# Define a URL for a threat intelligence feed
threat_feed_url = 'https://example.com/threat-feed'

# Function to fetch and analyze threat feed
def fetch_threat_feed(url):
    response = requests.get(url)
    if response.status_code == 200:
        threat_data = response.json()
        for threat in threat_data:
            analyze_threat(threat)
    else:
        print(f"Failed to fetch threat feed: {response.status_code}")

# Function to analyze a threat
def analyze_threat(threat):
    print(f"Threat detected: {threat['description']}")

# Fetch and analyze the threat feed
fetch_threat_feed(threat_feed_url)

import subprocess

# Define a function to quarantine a suspicious host
def quarantine_host(ip_address):
    subprocess.run(['iptables', '-A', 'INPUT', '-s', ip_address, '-j', 'DROP'])
    print(f"Quarantined host: {ip_address}")

# Function to handle an incident
def handle_incident(incident):
    if incident['type'] == 'malware':
        quarantine_host(incident['source_ip'])

# Example incident data
incident_data = {
    'type': 'malware',
    'source_ip': '192.168.1.101'
}

# Handle the incident
handle_incident(incident_data)

import psutil

# Function to monitor and log user activity
def monitor_user_activity():
    for proc in psutil.process_iter(['pid', 'name', 'username']):
        print(f"User: {proc.info['username']}, Process: {proc.info['name']}, PID: {proc.info['pid']}")

# Periodically monitor user activity
import time
while True:
    monitor_user_activity()
    time.sleep(60)

#!/bin/bash

# Allow SSH
ufw allow ssh

# Allow HTTP and HTTPS
ufw allow 80/tcp
ufw allow 443/tcp

# Deny all other incoming traffic
ufw default deny incoming

# Enable the firewall
ufw enable

import requests

# Define a function to assess vendor risk
def assess_vendor_risk(vendor_url):
    response = requests.get(f"https://api.riskassessment.com/?vendor={vendor_url}")
    if response.status_code == 200:
        risk_score = response.json()['risk_score']
        if risk_score > 70:
            print(f"High risk vendor: {vendor_url}")
        else:
            print(f"Vendor risk score: {risk_score}")
    else:
        print(f"Failed to assess vendor risk: {response.status_code}")

# Assess a vendor
assess_vendor_risk('https://example-vendor.com')

import logging

# Configure logging
logging.basicConfig(filename='insider_threats.log', level=logging.INFO)

# Function to detect suspicious activity
def detect_suspicious_activity(user, action):
    if action in ['data_exfiltration', 'unauthorized_access']:
        logging.info(f"Suspicious activity by {user}: {action}")

# Example user activities
user_activities = [
    {'user': 'alice', 'action': 'data_exfiltration'},
    {'user': 'bob', 'action': 'login'},
]

# Detect suspicious activities
for activity in user_activities:
    detect_suspicious_activity(activity['user'], activity['action'])

    
