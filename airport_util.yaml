import os
import hashlib
import shutil
import psutil
from datetime import datetime

class AirportSecureScan:
    """
    A conceptual utility for airport system health and simplified antimalware file checking.
    """

    # --- 1. Simplified Antimalware Component Data ---
    # In a real system, this would be a vast, constantly updated database (API or file).
    # These are example SHA256 hashes for demonstration.
    MALWARE_SIGNATURES = {
        "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855": "Empty_File_Suspect",
        "a4505f03d8d649f8c62c0a961678229b359f5a43878b667e81b6c00330965e68": "Known_Malware_Variant_A",
        # ... thousands of others ...
    }
    
    CRITICAL_DISK_THRESHOLD_PERCENT = 85
    CRITICAL_CPU_THRESHOLD_PERCENT = 90
    
    def __init__(self, target_directory='.'):
        """Initializes the scanner with the target directory."""
        self.target_directory = target_directory
        self.scan_results = {
            "time": None,
            "malware_found": [],
            "health_alerts": [],
            "files_scanned": 0
        }

    # --- 2. Antimalware Core Function ---
    def _calculate_file_hash(self, filepath, hash_algorithm='sha256'):
        """Calculates the hash of a file's contents."""
        hasher = hashlib.new(hash_algorithm)
        try:
            with open(filepath, 'rb') as file:
                # Read in chunks to handle large files efficiently
                while chunk := file.read(4096):
                    hasher.update(chunk)
            return hasher.hexdigest()
        except IOError as e:
            # Handle files that cannot be read (e.g., permissions issues, locked files)
            print(f"ERROR: Could not read file {filepath}: {e}")
            return None

    def scan_directory_for_malware(self):
        """Walks the directory and scans each file."""
        print(f"\n--- Scanning directory: {self.target_directory} ---")
        
        for root, _, files in os.walk(self.target_directory):
            for filename in files:
                filepath = os.path.join(root, filename)
                
                # Skip symbolic links and special files for safety
                if not os.path.islink(filepath) and os.path.exists(filepath):
                    self.scan_results["files_scanned"] += 1
                    file_hash = self._calculate_file_hash(filepath)
                    
                    if file_hash in self.MALWARE_SIGNATURES:
                        threat_name = self.MALWARE_SIGNATURES[file_hash]
                        self.scan_results["malware_found"].append({
                            "path": filepath,
                            "hash": file_hash,
                            "threat": threat_name
                        })
                        print(f"‚ö†Ô∏è THREAT DETECTED: {threat_name} at {filepath}")
        
        print(f"Scan complete. {self.scan_results['files_scanned']} files checked.")

    # --- 3. System Health Check Utility ---
    def check_system_health(self):
        """Checks critical system resources (Disk and CPU)."""
        print("\n--- Running System Health Check ---")
        
        # Check Disk Space
        total, used, free = shutil.disk_usage("/")
        used_percent = (used / total) * 100
        
        if used_percent > self.CRITICAL_DISK_THRESHOLD_PERCENT:
            alert = f"CRITICAL: Disk usage is {used_percent:.2f}% (Limit: {self.CRITICAL_DISK_THRESHOLD_PERCENT}%)"
            self.scan_results["health_alerts"].append(alert)
            print(f"üö® {alert}")
        else:
            print(f"‚úÖ Disk usage is healthy: {used_percent:.2f}%")

        # Check CPU Usage
        cpu_percent = psutil.cpu_percent(interval=1) # Measures average usage over 1 second
        
        if cpu_percent > self.CRITICAL_CPU_THRESHOLD_PERCENT:
            alert = f"CRITICAL: CPU usage is {cpu_percent}% (Limit: {self.CRITICAL_CPU_THRESHOLD_PERCENT}%)"
            self.scan_results["health_alerts"].append(alert)
            print(f"üî• {alert}")
        else:
            print(f"‚úÖ CPU usage is healthy: {cpu_percent}%")


    # --- 4. Reporting and Execution ---
    def run_full_scan(self):
        """Executes both antimalware and system health checks."""
        self.scan_results["time"] = datetime.now().isoformat()
        
        self.check_system_health()
        self.scan_directory_for_malware()
        
        self.generate_report()

    def generate_report(self):
        """Prints a final summary report."""
        print("\n" + "="*50)
        print("          AIRPORT SECURE SCAN REPORT          ")
        print("="*50)
        print(f"Scan Time: {self.scan_results['time']}")
        print(f"Files Checked: {self.scan_results['files_scanned']}")
        
        # Malware Summary
        print("\n--- ü¶† MALWARE SUMMARY ---")
        if self.scan_results["malware_found"]:
            print(f"‚ùóÔ∏è TOTAL THREATS FOUND: {len(self.scan_results['malware_found'])}")
            for threat in self.scan_results["malware_found"]:
                print(f"  - Threat: {threat['threat']} | Path: {threat['path']}")
        else:
            print("  - No malware signatures detected.")

        # Health Summary
        print("\n--- üõ†Ô∏è SYSTEM HEALTH SUMMARY ---")
        if self.scan_results["health_alerts"]:
            print(f"‚ùóÔ∏è TOTAL HEALTH ALERTS: {len(self.scan_results['health_alerts'])}")
            for alert in self.scan_results["health_alerts"]:
                print(f"  - {alert}")
        else:
            print("  - System health checks passed without critical alerts.")
        print("="*50)

# --- EXECUTION ---
if __name__ == "__main__":
    # Specify a directory to scan. Using '.' scans the current directory.
    # For a real airport utility, this would target critical operations folders.
    scanner = AirportSecureScan(target_directory='.') 
    scanner.run_full_scan()

