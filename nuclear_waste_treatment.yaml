import numpy as np
import matplotlib.pyplot as plt

# Pyroprocessing parameters
initial_concentration = 0.5  # Initial concentration of valuable material
separation_efficiency = 0.9  # Efficiency of separation process

# Time steps for simulation
time_steps = 100
concentration = np.zeros(time_steps)
concentration[0] = initial_concentration

# Pyroprocessing simulation
for t in range(1, time_steps):
    concentration[t] = concentration[t-1] * separation_efficiency

# Plot the results
plt.plot(concentration)
plt.xlabel('Time Step')
plt.ylabel('Concentration of Valuable Material')
plt.title('Concentration of Valuable Material over Time in Pyroprocessing')
plt.show()

class PIDController:
    def __init__(self, Kp, Ki, Kd, setpoint):
        self.Kp = Kp
        self.Ki = Ki
        self.Kd = Kd
        self.setpoint = setpoint
        self.previous_error = 0
        self.integral = 0

    def compute(self, measured_value):
        error = self.setpoint - measured_value
        self.integral += error
        derivative = error - self.previous_error
        self.previous_error = error
        output = self.Kp * error + self.Ki * self.integral + self.Kd * derivative
        return output

# Example usage
desired_temp = 1200  # Desired melter temperature in °C
pid = PIDController(Kp=2.0, Ki=0.1, Kd=0.05, setpoint=desired_temp)

# Simulate vitrification process control
time_steps = 100
temperature = np.zeros(time_steps)
heater_output = np.zeros(time_steps)
measured_temp = 1000  # Initial temperature

for t in range(time_steps):
    heater_output[t] = pid.compute(measured_temp)
    measured_temp += heater_output[t] * 0.1  # Simplified reactor response
    temperature[t] = measured_temp

# Plot the results
plt.plot(temperature)
plt.xlabel('Time Step')
plt.ylabel('Melter Temperature (°C)')
plt.title('Melter Temperature Control using PID Controller')
plt.show()

class SafetySystem:
    def __init__(self, max_temp, max_radiation):
        self.max_temp = max_temp
        self.max_radiation = max_radiation

    def check_safety(self, temperature, radiation_level):
        if temperature > self.max_temp:
            return "Emergency Shutdown: Temperature Exceeded!"
        if radiation_level > self.max_radiation:
            return "Emergency Shutdown: Radiation Level Exceeded!"
        return "All Systems Normal"

class DigitalTwin:
    def __init__(self, initial_state):
        self.state = initial_state

    def update_state(self, new_data):
        self.state = 0.9 * self.state + 0.1 * new_data  # Simple updating rule

    def predict_future_state(self, time_steps):
        predictions = []
        for _ in range(time_steps):
            self.state += 0.01 * self.state  # Simplified prediction model
            predictions.append(self.state)
        return predictions

# Example usage
safety_system = SafetySystem(max_temp=1300, max_radiation=5)
initial_state = np.array([1000, 2])  # Initial [temperature, radiation_level]
digital_twin = DigitalTwin(initial_state)

# Simulate monitoring
new_data = np.array([1050, 3])
digital_twin.update_state(new_data)
predictions = digital_twin.predict_future_state(10)

# Plot predictions
predictions = np.array(predictions)
plt.plot(predictions)
plt.xlabel('Future Time Steps')
plt.ylabel('Predicted Values')
plt.title('Predicted Future States using Digital Twin')
plt.legend(['Temperature', 'Radiation Level'])
plt.show()

# Safety check
status = safety_system.check_safety(new_data[0], new_data[1])
print(status)

